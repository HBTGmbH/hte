/* Generated By:JavaCC: Do not edit this line. HteParserConstants.java */
package de.hbt.hte.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HteParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BLANK = 1;
  /** RegularExpression Id. */
  int START_TAG = 2;
  /** RegularExpression Id. */
  int END_TAG = 3;
  /** RegularExpression Id. */
  int CLOSE_TAG1 = 4;
  /** RegularExpression Id. */
  int CLOSE_TAG2 = 5;
  /** RegularExpression Id. */
  int EXPR_BEGIN = 6;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE_IF = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int END_IF = 10;
  /** RegularExpression Id. */
  int LIST = 11;
  /** RegularExpression Id. */
  int END_LIST = 12;
  /** RegularExpression Id. */
  int ASSIGN = 13;
  /** RegularExpression Id. */
  int PRINTABLE_CHARS = 14;
  /** RegularExpression Id. */
  int COMMENT_START = 15;
  /** RegularExpression Id. */
  int COMMENT_END = 16;
  /** RegularExpression Id. */
  int COLON = 24;
  /** RegularExpression Id. */
  int EQ = 25;
  /** RegularExpression Id. */
  int OP = 26;
  /** RegularExpression Id. */
  int PROP_START = 27;
  /** RegularExpression Id. */
  int BANG = 28;
  /** RegularExpression Id. */
  int LPAR = 29;
  /** RegularExpression Id. */
  int RPAR = 30;
  /** RegularExpression Id. */
  int COMMA = 31;
  /** RegularExpression Id. */
  int DOT = 32;
  /** RegularExpression Id. */
  int LBRACKET = 33;
  /** RegularExpression Id. */
  int RBRACKET = 34;
  /** RegularExpression Id. */
  int COLON2 = 35;
  /** RegularExpression Id. */
  int LBRACE = 36;
  /** RegularExpression Id. */
  int RBRACE = 37;
  /** RegularExpression Id. */
  int ARROW = 38;
  /** RegularExpression Id. */
  int QUEST = 39;
  /** RegularExpression Id. */
  int QUEST2 = 40;
  /** RegularExpression Id. */
  int ELVIS = 41;
  /** RegularExpression Id. */
  int AS = 42;
  /** RegularExpression Id. */
  int IN = 43;
  /** RegularExpression Id. */
  int IS = 44;
  /** RegularExpression Id. */
  int EXPR_IF = 45;
  /** RegularExpression Id. */
  int EXPR_THEN = 46;
  /** RegularExpression Id. */
  int EXPR_ELSE = 47;
  /** RegularExpression Id. */
  int DIRECTIVE_END = 48;
  /** RegularExpression Id. */
  int EMPTY_DIRECTIVE_END = 49;
  /** RegularExpression Id. */
  int NOZERODECIMALDIGIT = 50;
  /** RegularExpression Id. */
  int DECIMALDIGIT = 51;
  /** RegularExpression Id. */
  int BINDIGIT = 52;
  /** RegularExpression Id. */
  int HEXDIGIT = 53;
  /** RegularExpression Id. */
  int INT = 54;
  /** RegularExpression Id. */
  int FREST = 55;
  /** RegularExpression Id. */
  int INTLITERAL = 56;
  /** RegularExpression Id. */
  int LONGLITERAL = 57;
  /** RegularExpression Id. */
  int DOUBLELITERAL = 58;
  /** RegularExpression Id. */
  int FLOATLITERAL = 59;
  /** RegularExpression Id. */
  int TRUE = 60;
  /** RegularExpression Id. */
  int FALSE = 61;
  /** RegularExpression Id. */
  int QIDENTIFIER = 62;
  /** RegularExpression Id. */
  int ESCAPED_CHAR = 63;
  /** RegularExpression Id. */
  int STRING = 64;
  /** RegularExpression Id. */
  int PROP_END = 65;
  /** RegularExpression Id. */
  int PROP_NAME = 66;
  /** RegularExpression Id. */
  int ID_WITH_DASHES = 67;
  /** RegularExpression Id. */
  int FQ_ID = 68;
  /** RegularExpression Id. */
  int IDENTIFIER = 69;
  /** RegularExpression Id. */
  int OP2 = 70;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTILINE_COMMENT = 1;
  /** Lexical state. */
  int EXPRESSION = 2;
  /** Lexical state. */
  int IN_PAREN = 3;
  /** Lexical state. */
  int PROPREF = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<BLANK>",
    "\"<#\"",
    "\"</#\"",
    "<CLOSE_TAG1>",
    "<CLOSE_TAG2>",
    "<EXPR_BEGIN>",
    "<IF>",
    "<ELSE_IF>",
    "<ELSE>",
    "<END_IF>",
    "<LIST>",
    "<END_LIST>",
    "<ASSIGN>",
    "<PRINTABLE_CHARS>",
    "<COMMENT_START>",
    "<COMMENT_END>",
    "<token of kind 17>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 22>",
    "<token of kind 23>",
    "\":\"",
    "\"=\"",
    "<OP>",
    "\"${\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"::\"",
    "\"{\"",
    "\"}\"",
    "\"->\"",
    "\"?\"",
    "\"??\"",
    "\"?:\"",
    "\"as\"",
    "\"in\"",
    "\"is\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\">\"",
    "\"/>\"",
    "<NOZERODECIMALDIGIT>",
    "<DECIMALDIGIT>",
    "<BINDIGIT>",
    "<HEXDIGIT>",
    "<INT>",
    "<FREST>",
    "<INTLITERAL>",
    "<LONGLITERAL>",
    "<DOUBLELITERAL>",
    "<FLOATLITERAL>",
    "\"true\"",
    "\"false\"",
    "<QIDENTIFIER>",
    "<ESCAPED_CHAR>",
    "<STRING>",
    "<PROP_END>",
    "<PROP_NAME>",
    "<ID_WITH_DASHES>",
    "<FQ_ID>",
    "<IDENTIFIER>",
    "\">\"",
  };

}
