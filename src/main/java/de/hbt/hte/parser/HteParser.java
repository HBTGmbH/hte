/* HteParser.java */
/* Generated By:JavaCC: Do not edit this line. HteParser.java */
package de.hbt.hte.parser;
import java.util.*;
import de.hbt.hte.ast.*;
import de.hbt.hte.rt.*;

@ SuppressWarnings(
{
  "unused", "serial"
}

) public class HteParser implements HteParserConstants {
  private Profile profile;

  private Map < String, String > metaAttributes = new HashMap < String, String > ();

  public HteParser(Profile profile, java.io.InputStream stream)
  {
    this (stream, "UTF-8");
    this.profile = profile;
  }

  public HteParser(Profile profile, java.io.Reader stream)
  {
    this (stream);
    this.profile = profile;
  }

  /**
   * Activate the given lexical state.
   */
  public void switchTo(int lexicalState)
  {
    token_source.SwitchTo(lexicalState);
  }

  /**
   * Set the given Profile.
   */
  public void setProfile(Profile profile)
  {
    this.profile = profile;
  }

  /**
   * @return the Profile
   */
  public Profile getProfile()
  {
    return this.profile;
  }

  final public TemplateNode templateNode() throws ParseException {Node n;
    n = sequence(false);
    jj_consume_token(0);
TemplateNode tn = new TemplateNode(metaAttributes, n);
    tn.location(n.startLine, n.startColumn, n.endLine, n.endColumn);
    {if ("" != null) return tn;}
    throw new Error("Missing return statement in function");
}

  final public Node sequence(boolean trim) throws ParseException {Token t;
  SequenceNode n = new SequenceNode();
  Node e = null;
  boolean merge = false, first = true, firstNode = true;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPR_BEGIN:
      case IF:
      case LIST:
      case ASSIGN:
      case PRINTABLE_CHARS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINTABLE_CHARS:{
        t = jj_consume_token(PRINTABLE_CHARS);
if (merge)
      {
        /* The previous node was also a TextNode, so merge the texts */
        TextNode tn = (TextNode) e;
        tn.append(t.image);
        tn.location(tn.startLine, tn.startColumn, t.endLine, t.endColumn);
      }
      else
      {
        /* The previous node was not a TextNode, create a new one */
        String text = t.image;
        if (first && trim || !trim)
        {
          /* Strip off unnecessary whitespaces */
          text = AstUtils.stripLeft(text);
        }
        if (text != null && text.length() > 0)
        {
          e = new TextNode(text);
          e.location(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
          first = false;
          n.add(e);
          merge = true;
        }
      }
        break;
        }
      case EXPR_BEGIN:
      case IF:
      case LIST:
      case ASSIGN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXPR_BEGIN:{
          e = expressionNode();
          break;
          }
        case IF:{
          e = branchNode();
          break;
          }
        case LIST:{
          e = listNode();
          break;
          }
        case ASSIGN:{
          e = assignNode();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
merge = false;
      if (e != null)
      {
        n.add(e);
        firstNode = false;
      }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if (n.isEmpty())
    {
      {if ("" != null) return null;}
    }
    else if (n.size() == 1)
    {
      {if ("" != null) return n.get(0);}
    }
    {if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

  final public Token id() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
      break;
      }
    case QIDENTIFIER:{
      t = jj_consume_token(QIDENTIFIER);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Node expressionNode() throws ParseException {Expression expr;
  Token b, e, as = null;
    b = jj_consume_token(EXPR_BEGIN);
    expr = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      as = id();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    e = jj_consume_token(RBRACE);
ExpressionNode n = new ExpressionNode(expr, as);
    n.location(b.beginLine, b.beginColumn, e.endLine, e.endColumn);
    {if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

  final public Token LooseDirectiveEnd() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIRECTIVE_END:{
      t = jj_consume_token(DIRECTIVE_END);
      break;
      }
    case EMPTY_DIRECTIVE_END:{
      t = jj_consume_token(EMPTY_DIRECTIVE_END);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public BranchNode branchNode() throws ParseException {Expression cond;
  Node block;
  BranchNode n, bn;
  Token t, t2;
    t = jj_consume_token(IF);
    cond = expression();
    t2 = jj_consume_token(DIRECTIVE_END);
    block = sequence(true);
n = new BranchNode(cond, block);
    if (block != null) {
      n.location(t.beginLine, t.beginColumn, block.endLine, block.endColumn);
    } else {
      n.location(t.beginLine, t.beginColumn, t2.endLine, t2.endColumn);
    }
    bn = n;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(ELSE_IF);
      cond = expression();
      t2 = LooseDirectiveEnd();
      block = sequence(true);
BranchNode elif = new BranchNode(cond, block);
      bn.elseCase = elif;
      if (block != null) {
        elif.location(t.beginLine, t.beginColumn, block.endLine, block.endColumn);
        bn.location(bn.startLine, bn.startColumn, block.endLine, block.endColumn);
      } else {
        elif.location(t.beginLine, t.beginColumn, t2.endLine, t2.endColumn);
        bn.location(bn.startLine, bn.startColumn, t2.endLine, t2.endColumn);
      }
      bn = elif;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      t = jj_consume_token(ELSE);
      block = sequence(true);
bn.elseCase = block;
      if (block != null) {
        bn.location(bn.startLine, bn.startColumn, block.endLine, block.endColumn);
      } else {
        bn.location(bn.startLine, bn.startColumn, t.endLine, t.endColumn);
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    t = jj_consume_token(END_IF);
bn.location(bn.startLine, bn.startColumn, t.endLine, t.endColumn);
    {if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

  final public ForEachNode listNode() throws ParseException {SymbolDecl counter;
  Expression collection;
  ForEachNode ret;
  Node block, elseBlock = null;
  Token t, t2;
    t = jj_consume_token(LIST);
    collection = expression();
    jj_consume_token(AS);
    counter = symbdecl();
    jj_consume_token(DIRECTIVE_END);
    block = sequence(true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseBlock = sequence(true);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    t2 = jj_consume_token(END_LIST);
ret = new ForEachNode(counter, collection, block);
    ret.location(t.beginLine, t.beginColumn, t2.endLine, t2.endColumn);
    if (elseBlock != null)
      ret.elseBody = elseBlock;
    {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

  final public Node assignNode() throws ParseException {Expression e;
  RecordConstructorExpression rce;
  Token t, t2;
    t = jj_consume_token(ASSIGN);
    rce = recordctorcontent();
    t2 = jj_consume_token(DIRECTIVE_END);
AssignNode n = new AssignNode(rce);
    {if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

  final public RecordConstructorExpression recordctorcontent() throws ParseException {RecordConstructorExpression res = new RecordConstructorExpression();
  Token id;
  Expression val;
  SymbolDef def;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QIDENTIFIER:
    case IDENTIFIER:{
      id = id();
      jj_consume_token(EQ);
      val = expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
def = new SymbolDef(id, val);
      def.location(id.beginLine, id.beginColumn, val.endLine, val.endColumn);
      res.add(def);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QIDENTIFIER:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        id = id();
        jj_consume_token(EQ);
        val = expression();
def = new SymbolDef(id, val);
        def.location(id.beginLine, id.beginColumn, val.endLine, val.endColumn);
        res.add(def);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Expression expression() throws ParseException {Expression r;
    r = conditional();
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
}

/**
 * Equivalent of Java's ternary operator ?:
 */
  final public Expression conditional() throws ParseException {Expression cond, thenExpr, elseExpr;
  Token t;
  Expression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXPR_IF:{
      t = jj_consume_token(EXPR_IF);
      cond = expression();
      jj_consume_token(EXPR_THEN);
      thenExpr = expression();
      jj_consume_token(EXPR_ELSE);
      elseExpr = expression();
ret = new ConditionalExpression(cond, thenExpr, elseExpr);
      {if ("" != null) return ret;}
      break;
      }
    case OP:
    case BANG:
    case LPAR:
    case INTLITERAL:
    case LONGLITERAL:
    case DOUBLELITERAL:
    case FLOATLITERAL:
    case TRUE:
    case FALSE:
    case QIDENTIFIER:
    case STRING:
    case IDENTIFIER:
    case OP2:{
      ret = binary();
{if ("" != null) return ret;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public SymbolRef symbrefunop() throws ParseException {SymbolRef symb;
  Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP:{
      name = jj_consume_token(OP);
      break;
      }
    case OP2:{
      name = jj_consume_token(OP2);
      break;
      }
    case BANG:{
      name = jj_consume_token(BANG);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
symb = new SymbolRef(name);
    symb.location(name.beginLine, name.beginColumn, name.endLine, name.endColumn);
{if ("" != null) return symb;}
    throw new Error("Missing return statement in function");
}

  final public SymbolRef symbrefbinop() throws ParseException {SymbolRef symb;
  Token name;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP:
    case OP2:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP:{
        name = jj_consume_token(OP);
        break;
        }
      case OP2:{
        name = jj_consume_token(OP2);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case QIDENTIFIER:
    case IDENTIFIER:{
      name = id();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
symb = new SymbolRef(name);
    symb.location(name.beginLine, name.beginColumn, name.endLine, name.endColumn);
{if ("" != null) return symb;}
    throw new Error("Missing return statement in function");
}

  final public SymbolDecl symbdecl() throws ParseException {SymbolDecl symb;
  Token name;
    name = id();
symb = new SymbolDecl(name);
    symb.location(name.beginLine, name.beginColumn, name.endLine, name.endColumn);
{if ("" != null) return symb;}
    throw new Error("Missing return statement in function");
}

  final public SymbolRef symbref() throws ParseException {SymbolRef symb;
  Token name;
    name = id();
symb = new SymbolRef(name);
    symb.location(name.beginLine, name.beginColumn, name.endLine, name.endColumn);
{if ("" != null) return symb;}
    throw new Error("Missing return statement in function");
}

  final public Expression binary() throws ParseException {Expression res, v;
  Token op;
  BinaryExpression be;
  SymbolRef symb;
    res = postfixedExpr();
    if (jj_2_1(2147483647)) {
      symb = symbrefbinop();
      v = binary();
be = new BinaryExpression(res, symb, v);
      be.location(res.startLine, res.startColumn, v.endLine, v.endColumn);
      res = AstUtils.repairRightAssoc(profile, be);
      res.location(res.startLine, res.startColumn, v.endLine, v.endColumn);
    } else {
      ;
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Expression binaryrest(Expression left) throws ParseException {SymbolRef symb;
  Expression res, right;
    symb = symbrefbinop();
    right = postfixedExpr();
res = new BinaryExpression(left, symb, right);
    res = AstUtils.repairLeftAssoc(profile, res);
    res.location(left.startLine, left.startColumn, right.endLine, right.endColumn);
    {if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Expression postfixedExpr() throws ParseException {Expression prim, ret, e, e2;
  Token t;
    prim = primary();
ret = prim;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:
      case LBRACKET:
      case QUEST:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:
      case QUEST:{
        ret = attributeSelect(ret);
        break;
        }
      case LBRACKET:{
        ret = index(ret);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELVIS:{
      t = jj_consume_token(ELVIS);
      e2 = primary();
e = new ExpressionWithDefault(ret, e2);
      ret = e;
      ret.location(prim.startLine, prim.startColumn, e2.endLine, e2.endColumn);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

  final public List < Expression > arglist() throws ParseException {Expression arg, arg2;
  List < Expression > list = new ArrayList < Expression > ();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP:
    case BANG:
    case LPAR:
    case EXPR_IF:
    case INTLITERAL:
    case LONGLITERAL:
    case DOUBLELITERAL:
    case FLOATLITERAL:
    case TRUE:
    case FALSE:
    case QIDENTIFIER:
    case STRING:
    case IDENTIFIER:
    case OP2:{
      arg = expression();
list.add(arg);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        arg2 = expression();
list.add(arg2);
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

  final public Expression attributeSelect(Expression left) throws ParseException {SymbolRef ref;
  Token t, l;
  boolean nullSafe = false;
  Expression res;
  List < Expression > list;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      l = jj_consume_token(DOT);
      break;
      }
    case QUEST:{
      l = jj_consume_token(QUEST);
      jj_consume_token(DOT);
nullSafe = true;
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ref = symbref();
AttributeSelectExpression ase;
    ase = new AttributeSelectExpression(left, ref, nullSafe);
    res = ase;
    res.location(l.beginLine, l.beginColumn, ref.endLine, ref.endColumn);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      list = arglist();
      t = jj_consume_token(RPAR);
res = new MethodCallExpression(left, ref, list);
        res.location(l.beginLine, l.beginColumn, t.endLine, t.endColumn);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Expression index(Expression left) throws ParseException {Expression e;
  Token l, r;
    l = jj_consume_token(LBRACKET);
    e = expression();
    r = jj_consume_token(RBRACKET);
Expression res = new IndexExpression(left, e);
    res.location(l.beginLine, l.beginColumn, r.endLine, r.endColumn);
    {if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public LiteralExpression literal() throws ParseException {Token t;
  LiteralExpression res;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      t = jj_consume_token(TRUE);
res = new LiteralExpression(Boolean.TRUE);
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
res = new LiteralExpression(Boolean.FALSE);
      break;
      }
    case INTLITERAL:{
      t = jj_consume_token(INTLITERAL);
res = new LiteralExpression(Integer.valueOf(t.image));
      break;
      }
    case LONGLITERAL:{
      t = jj_consume_token(LONGLITERAL);
res = new LiteralExpression(Long.valueOf(t.image));
      break;
      }
    case DOUBLELITERAL:{
      t = jj_consume_token(DOUBLELITERAL);
res = new LiteralExpression(Double.valueOf(t.image));
      break;
      }
    case FLOATLITERAL:{
      t = jj_consume_token(FLOATLITERAL);
res = new LiteralExpression(Float.valueOf(t.image));
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
res = new LiteralExpression(t.image);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
res.location(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
    {if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  final public Expression primary() throws ParseException {Token l, r, name;
  Expression v, res;
  SymbolRef symb;
  List < Expression > list;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTLITERAL:
    case LONGLITERAL:
    case DOUBLELITERAL:
    case FLOATLITERAL:
    case TRUE:
    case FALSE:
    case STRING:{
      res = literal();
      break;
      }
    case OP:
    case BANG:
    case OP2:{
      symb = symbrefunop();
      v = primary();
res = new UnaryExpression(symb, v);
      res.location(symb.startLine, symb.startColumn, v.endLine, v.endColumn);
      break;
      }
    case QIDENTIFIER:
    case IDENTIFIER:{
      res = symbref();
      break;
      }
    case LPAR:{
      l = jj_consume_token(LPAR);
      v = expression();
      r = jj_consume_token(RPAR);
res = new ParenthesizedExpression(v);
      res.location(l.beginLine, l.beginColumn, r.beginLine, r.beginColumn);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(QUEST)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(EXPR_IF)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(EXPR_THEN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(EXPR_ELSE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    if (jj_3R_24()) return true;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(FLOATLITERAL)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(DOUBLELITERAL)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(LONGLITERAL)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(INTLITERAL)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(ELVIS)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HteParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x68c0,0x28c0,0x68c0,0x0,0x0,0x0,0x100,0x200,0x200,0x80000000,0x0,0x80000000,0x0,0x34000000,0x14000000,0x4000000,0x4000000,0x0,0x0,0x0,0x80000000,0x34000000,0x0,0x20000000,0x0,0x34000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x40000000,0x400,0x30000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x7f002000,0x0,0x0,0x40000000,0x83,0x83,0x200,0x0,0x7f002000,0x81,0x0,0x3f000000,0x7f000000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x61,0x40,0x40,0x60,0x0,0x0,0x0,0x0,0x61,0x0,0x0,0x1,0x61,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HteParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HteParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new HteParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HteParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new HteParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new HteParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HteParser(HteParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HteParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[71];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 26; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 71; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
