/* HteParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. HteParserTokenManager.java */
package de.hbt.hte.parser;
import java.util.*;
import de.hbt.hte.ast.*;
import de.hbt.hte.rt.*;

/** Token Manager. */
public class HteParserTokenManager implements HteParserConstants {
  private int parenthesisNesting;

  private int braceNesting;

  private boolean inExpressionNode;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(1, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xefffffe7ffffffffL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     { jjCheckNAdd(3); }
                  }
                  else if ((0x1000001800000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 60)
                     { jjAddStates(0, 7); }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0xefffffe7ffffffffL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if ((0x1000001800000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 5:
                  if (curChar == 60)
                     { jjAddStates(0, 7); }
                  break;
               case 6:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 8:
                  if ((0x100002600L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 12:
                  if ((0x100002600L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 18:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 20:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 21:
                  if (curChar == 47)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 26:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 28:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 29:
                  if (curChar == 62 && kind > 10)
                     kind = 10;
                  break;
               case 31:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 32:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 34:
                  if ((0x100002600L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 38:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 40:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 41:
                  if (curChar == 62 && kind > 12)
                     kind = 12;
                  break;
               case 45:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 46:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 48:
                  if ((0x100002600L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 54:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 55:
                  if (curChar == 45 && kind > 15)
                     kind = 15;
                  break;
               case 56:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xf7fffffff7fffffeL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     { jjCheckNAdd(3); }
                  }
                  else if ((0x800000008000001L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 123 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0xf7fffffff7fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if ((0x800000008000001L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 7:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 101)
                     { jjAddStates(8, 10); }
                  break;
               case 23:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 102)
                     { jjAddStates(11, 12); }
                  break;
               case 30:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 116)
                     { jjAddStates(13, 14); }
                  break;
               case 42:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 43:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4008000000L) != 0L)
         {
            jjmatchedKind = 26;
            return -1;
         }
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 26;
            return 30;
         }
         if ((active0 & 0x3000fc0000000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 16;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 19;
         if ((active0 & 0x100000000L) != 0L)
            return 78;
         if ((active0 & 0x10000000L) != 0L)
            return 23;
         if ((active0 & 0x1000000000000L) != 0L)
            return 28;
         return -1;
      case 1:
         if ((active0 & 0x4008000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 26;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x3c0000000000L) != 0L)
            return 16;
         if ((active0 & 0x3000c00000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0x3000c00000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 16;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 16;
         }
         if ((active0 & 0x1000c00000000000L) != 0L)
            return 16;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_2(0, 28, 23);
      case 36:
         return jjMoveStringLiteralDfa1_2(0x8000000L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         return jjMoveStringLiteralDfa1_2(0x4000000000L);
      case 46:
         return jjStartNfaWithStates_2(0, 32, 78);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x2000000000000L);
      case 58:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_2(0x800000000L);
      case 61:
         return jjStartNfaWithStates_2(0, 25, 19);
      case 62:
         return jjStartNfaWithStates_2(0, 48, 28);
      case 63:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_2(0x30000000000L);
      case 91:
         return jjStopAtPos(0, 33);
      case 93:
         return jjStopAtPos(0, 34);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x800000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x380000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x1000400000000000L);
      case 123:
         return jjStopAtPos(0, 36);
      case 125:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 63:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 45, 16);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 43, 16);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000000000L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 42, 16);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 44, 16);
         break;
      case 123:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 47, 16);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 60, 16);
         break;
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 46, 16);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 61, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if (curChar == 62)
                     { jjCheckNAdd(27); }
                  else if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 62)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(18, 20); }
                  }
                  break;
               case 30:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(36, 37); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 19:
                  if (curChar == 61)
                     { jjCheckNAdd(20); }
                  if (curChar == 61)
                     { jjCheckNAdd(18); }
                  if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 23:
                  if (curChar == 61)
                     { jjCheckNAdd(18); }
                  if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAddStates(24, 46); }
                  }
                  else if ((0x3000ac7000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(47, 54); }
                  else if (curChar == 48)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAddStates(47, 53); }
                  }
                  else if (curChar == 62)
                     { jjCheckNAddStates(54, 56); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(18, 23); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(57, 59); }
                  if (curChar == 47)
                     { jjAddStates(60, 61); }
                  else if (curChar == 60)
                     { jjCheckNAddTwoStates(18, 25); }
                  else if (curChar == 61)
                     { jjCheckNAddStates(62, 65); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 42 && kind > 26)
                     kind = 26;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (curChar == 38 && kind > 26)
                     kind = 26;
                  break;
               case 6:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  { jjAddStates(66, 67); }
                  break;
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 14:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 61)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 18:
                  if (curChar == 61 && kind > 26)
                     kind = 26;
                  break;
               case 21:
                  if (curChar == 61)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(18, 23); }
                  break;
               case 24:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(18, 25); }
                  break;
               case 25:
                  if (curChar == 60 && kind > 26)
                     kind = 26;
                  break;
               case 26:
                  if (curChar == 62)
                     { jjCheckNAddStates(54, 56); }
                  break;
               case 27:
                  if (curChar == 62 && kind > 26)
                     kind = 26;
                  break;
               case 29:
                  if (curChar == 47)
                     { jjAddStates(60, 61); }
                  break;
               case 31:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 32:
                  if ((0x2400L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 33:
                  if (curChar == 10 && kind > 22)
                     kind = 22;
                  break;
               case 34:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 36:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 42)
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 38:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(39, 37); }
                  break;
               case 39:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(39, 37); }
                  break;
               case 40:
                  if (curChar != 47)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjAddStates(71, 72); }
                  break;
               case 41:
                  if ((0x2400L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 42:
                  if (curChar == 10 && kind > 23)
                     kind = 23;
                  break;
               case 43:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddStates(47, 53); }
                  break;
               case 46:
                  if (curChar == 46)
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 50:
                  if (curChar != 46)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(51, 49); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(73, 75); }
                  break;
               case 53:
                  if (curChar == 46)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 57:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(58, 56); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 60:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddStates(24, 46); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(82, 84); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(88, 90); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 93); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(94, 96); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(97, 99); }
                  break;
               case 77:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(47, 54); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 20:
                  if (curChar == 126 && kind > 26)
                     kind = 26;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAdd(16); }
                  }
                  else if ((0x5000000040000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 96)
                     { jjCheckNAdd(8); }
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 124 && kind > 26)
                     kind = 26;
                  break;
               case 4:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 96)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 9:
                  if (curChar == 96 && kind > 62)
                     kind = 62;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x14400010000000L & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(16); }
                  break;
               case 31:
                  { jjAddStates(21, 23); }
                  break;
               case 36:
                  { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
               case 39:
                  { jjCheckNAddTwoStates(39, 37); }
                  break;
               case 45:
                  if ((0x100000001000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 48:
                  if (curChar == 95)
                     { jjAddStates(100, 101); }
                  break;
               case 49:
                  if ((0x1000000010L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 52:
                  if (curChar == 95)
                     { jjAddStates(102, 103); }
                  break;
               case 55:
                  if (curChar == 95)
                     { jjAddStates(104, 105); }
                  break;
               case 56:
                  if ((0x4000000040L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 59:
                  if (curChar == 95)
                     { jjAddStates(106, 107); }
                  break;
               case 61:
                  if (curChar == 95)
                     { jjAddStates(108, 109); }
                  break;
               case 63:
                  if (curChar == 95)
                     { jjAddStates(110, 111); }
                  break;
               case 65:
                  if (curChar == 95)
                     { jjAddStates(112, 113); }
                  break;
               case 67:
                  if (curChar == 95)
                     { jjAddStates(114, 115); }
                  break;
               case 69:
                  if (curChar == 95)
                     { jjAddStates(116, 117); }
                  break;
               case 71:
                  if (curChar == 95)
                     { jjAddStates(118, 119); }
                  break;
               case 73:
                  if (curChar == 95)
                     { jjAddStates(120, 121); }
                  break;
               case 75:
                  if (curChar == 95)
                     { jjAddStates(122, 123); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(57, 59); }
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(21, 23); }
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(39, 37); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4008000000L) != 0L)
         {
            jjmatchedKind = 26;
            return -1;
         }
         if ((active0 & 0x3000fc0000000000L) != 0L)
         {
            jjmatchedKind = 69;
            return 16;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 19;
         if ((active0 & 0x100000000L) != 0L)
            return 78;
         if ((active0 & 0x10000000L) != 0L)
            return 23;
         if ((active1 & 0x40L) != 0L)
            return 28;
         return -1;
      case 1:
         if ((active0 & 0x4008000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 26;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x3c0000000000L) != 0L)
            return 16;
         if ((active0 & 0x3000c00000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0x3000c00000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 16;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
            return 16;
         }
         if ((active0 & 0x1000c00000000000L) != 0L)
            return 16;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_3(0, 28, 23);
      case 36:
         return jjMoveStringLiteralDfa1_3(0x8000000L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         return jjMoveStringLiteralDfa1_3(0x4000000000L);
      case 46:
         return jjStartNfaWithStates_3(0, 32, 78);
      case 58:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_3(0x800000000L);
      case 61:
         return jjStartNfaWithStates_3(0, 25, 19);
      case 62:
         return jjStartNfaWithStates_3(0, 70, 28);
      case 63:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_3(0x30000000000L);
      case 91:
         return jjStopAtPos(0, 33);
      case 93:
         return jjStopAtPos(0, 34);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x800000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x2000000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x380000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x1000400000000000L);
      case 123:
         return jjStopAtPos(0, 36);
      case 125:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 63:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 45, 16);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 43, 16);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000000000L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 42, 16);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 44, 16);
         break;
      case 123:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 47, 16);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 60, 16);
         break;
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 46, 16);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 61, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0, 0L);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 78;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if (curChar == 62)
                     { jjCheckNAdd(27); }
                  else if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 62)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(18, 20); }
                  }
                  break;
               case 19:
                  if (curChar == 61)
                     { jjCheckNAdd(20); }
                  if (curChar == 61)
                     { jjCheckNAdd(18); }
                  if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 23:
                  if (curChar == 61)
                     { jjCheckNAdd(18); }
                  if (curChar == 61)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAddStates(24, 46); }
                  }
                  else if ((0x3000ac7000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(47, 54); }
                  else if (curChar == 48)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAddStates(47, 53); }
                  }
                  else if (curChar == 62)
                     { jjCheckNAddStates(54, 56); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(18, 23); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(57, 59); }
                  if (curChar == 47)
                     { jjAddStates(60, 61); }
                  else if (curChar == 60)
                     { jjCheckNAddTwoStates(18, 25); }
                  else if (curChar == 61)
                     { jjCheckNAddStates(62, 65); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 42 && kind > 26)
                     kind = 26;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (curChar == 38 && kind > 26)
                     kind = 26;
                  break;
               case 6:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  { jjAddStates(66, 67); }
                  break;
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 14:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 61)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 18:
                  if (curChar == 61 && kind > 26)
                     kind = 26;
                  break;
               case 21:
                  if (curChar == 61)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(18, 23); }
                  break;
               case 24:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(18, 25); }
                  break;
               case 25:
                  if (curChar == 60 && kind > 26)
                     kind = 26;
                  break;
               case 26:
                  if (curChar == 62)
                     { jjCheckNAddStates(54, 56); }
                  break;
               case 27:
                  if (curChar == 62 && kind > 26)
                     kind = 26;
                  break;
               case 29:
                  if (curChar == 47)
                     { jjAddStates(60, 61); }
                  break;
               case 30:
                  if (curChar == 47)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 31:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 32:
                  if ((0x2400L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 33:
                  if (curChar == 10 && kind > 22)
                     kind = 22;
                  break;
               case 34:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 36:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 42)
                     { jjCheckNAddStates(68, 70); }
                  break;
               case 38:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(39, 37); }
                  break;
               case 39:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(39, 37); }
                  break;
               case 40:
                  if (curChar != 47)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjAddStates(71, 72); }
                  break;
               case 41:
                  if ((0x2400L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 42:
                  if (curChar == 10 && kind > 23)
                     kind = 23;
                  break;
               case 43:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddStates(47, 53); }
                  break;
               case 46:
                  if (curChar == 46)
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 50:
                  if (curChar != 46)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(51, 49); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(73, 75); }
                  break;
               case 53:
                  if (curChar == 46)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(15, 17); }
                  break;
               case 57:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(58, 56); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 60:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddStates(24, 46); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(82, 84); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(85, 87); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(88, 90); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 93); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(94, 96); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(97, 99); }
                  break;
               case 77:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(47, 54); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 20:
                  if (curChar == 126 && kind > 26)
                     kind = 26;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAdd(16); }
                  }
                  else if ((0x5000000040000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 96)
                     { jjCheckNAdd(8); }
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 124 && kind > 26)
                     kind = 26;
                  break;
               case 4:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 96)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 9:
                  if (curChar == 96 && kind > 62)
                     kind = 62;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x14400010000000L & l) != 0L)
                     { jjCheckNAddStates(57, 59); }
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(16); }
                  break;
               case 31:
                  { jjAddStates(21, 23); }
                  break;
               case 36:
                  { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
               case 39:
                  { jjCheckNAddTwoStates(39, 37); }
                  break;
               case 45:
                  if ((0x100000001000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 48:
                  if (curChar == 95)
                     { jjAddStates(100, 101); }
                  break;
               case 49:
                  if ((0x1000000010L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 52:
                  if (curChar == 95)
                     { jjAddStates(102, 103); }
                  break;
               case 55:
                  if (curChar == 95)
                     { jjAddStates(104, 105); }
                  break;
               case 56:
                  if ((0x4000000040L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 59:
                  if (curChar == 95)
                     { jjAddStates(106, 107); }
                  break;
               case 61:
                  if (curChar == 95)
                     { jjAddStates(108, 109); }
                  break;
               case 63:
                  if (curChar == 95)
                     { jjAddStates(110, 111); }
                  break;
               case 65:
                  if (curChar == 95)
                     { jjAddStates(112, 113); }
                  break;
               case 67:
                  if (curChar == 95)
                     { jjAddStates(114, 115); }
                  break;
               case 69:
                  if (curChar == 95)
                     { jjAddStates(116, 117); }
                  break;
               case 71:
                  if (curChar == 95)
                     { jjAddStates(118, 119); }
                  break;
               case 73:
                  if (curChar == 95)
                     { jjAddStates(120, 121); }
                  break;
               case 75:
                  if (curChar == 95)
                     { jjAddStates(122, 123); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(57, 59); }
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(21, 23); }
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(39, 37); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 78 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(5, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 62)
                     break;
                  kind = 16;
                  { jjAddStates(124, 125); }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 2:
                  if (curChar == 10 && kind > 16)
                     kind = 16;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 66)
                     kind = 66;
                  break;
               case 7:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAddTwoStates(8, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     { jjCheckNAddTwoStates(7, 8); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 65)
                        kind = 65;
                  }
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x14400010000000L & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAddTwoStates(8, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(126, 128); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\72", "\75", null, 
"\44\173", "\41", "\50", "\51", "\54", "\56", "\133", "\135", "\72\72", "\173", "\175", 
"\55\76", "\77", "\77\77", "\77\72", "\141\163", "\151\156", "\151\163", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\76", "\57\76", null, null, null, null, null, null, null, 
null, null, null, "\164\162\165\145", "\146\141\154\163\145", null, null, null, null, 
null, null, null, null, "\76", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   6, 10, 18, 31, 32, 45, 46, 54, 20, 21, 22, 28, 29, 40, 41, 55, 
   56, 54, 48, 49, 47, 31, 32, 34, 61, 62, 63, 64, 45, 65, 66, 46, 
   67, 68, 50, 69, 70, 49, 71, 72, 53, 73, 74, 57, 75, 76, 56, 45, 
   46, 50, 49, 53, 57, 56, 18, 27, 28, 11, 12, 14, 30, 35, 18, 19, 
   20, 21, 8, 9, 37, 38, 40, 41, 43, 52, 49, 51, 59, 56, 58, 63, 
   64, 45, 65, 66, 46, 67, 68, 50, 69, 70, 49, 71, 72, 53, 73, 74, 
   57, 75, 76, 56, 48, 47, 52, 51, 55, 54, 59, 58, 61, 62, 63, 64, 
   65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1, 3, 2, 3, 
   5, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 17)
       {
          jjmatchedKind = 17;
       }
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inExpressionNode = true;
    braceNesting = 1;
    SwitchTo(EXPRESSION);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
    parenthesisNesting++;
    SwitchTo(IN_PAREN);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
    parenthesisNesting--;
    if (parenthesisNesting == 0) SwitchTo(EXPRESSION);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
    braceNesting++;
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
    braceNesting--;
    if (inExpressionNode && braceNesting == 0)
    {
      inExpressionNode = false;
      SwitchTo(DEFAULT);
    }
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
    if (inExpressionNode) matchedToken.kind = OP;
    else SwitchTo(DEFAULT);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = matchedToken.image.replace("_", "");
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String ll = matchedToken.image.replace("_", "");
    matchedToken.image = ll.substring(0, ll.length() - 1);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String dl = matchedToken.image.replace("_", "");
    if (dl.endsWith("d") || dl.endsWith("D"))
    {
      dl = dl.substring(0, dl.length() - 1);
    }
    matchedToken.image = dl;
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String fl = matchedToken.image.replace("_", "");
    if (fl.endsWith("f") || fl.endsWith("F"))
    {
      fl = fl.substring(0, fl.length() - 1);
    }
    matchedToken.image = fl;
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String to = matchedToken.image;
    /* Get rid of start and end quote */
    to = to.substring(1, to.length() - 1);
    matchedToken.image = to;
         break;
      case 64 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String t = matchedToken.image;
    /* Get rid of start and end quote */
    t = t.substring(1, t.length() - 1);
    /* Unescape escape sequences */
    t = StringUtils.unescapeJava(t);
    matchedToken.image = t;
         break;
      case 66 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String pn = matchedToken.image;
    /* Get rid of start and end quote */
    pn = pn.substring(1, pn.length() - 1);
    /* Unescape escape sequences */
    pn = StringUtils.unescapeJava(pn);
    matchedToken.image = pn;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public HteParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public HteParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 78; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTILINE_COMMENT",
   "EXPRESSION",
   "IN_PAREN",
   "PROPREF",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7f03ffffff007fc1L, 0x77L, 
};
static final long[] jjtoSkip = {
   0xff8000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[78];
    private final int[] jjstateSet = new int[2 * 78];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
